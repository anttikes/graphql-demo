// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieCatalog.Persistence.Repositories;

#nullable disable

namespace MovieCatalog.Persistence.Migrations
{
    [DbContext(typeof(MovieContext))]
    [Migration("20221231124309_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MovieCatalog.Domain.Models.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte?>("AgeLimit")
                        .HasColumnType("tinyint");

                    b.Property<string>("Genres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("Rating")
                        .HasColumnType("tinyint");

                    b.Property<string>("Synopsis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Movies_Id");

                    b.ToTable("Movies", (string)null);
                });

            modelBuilder.Entity("MovieCatalog.Domain.Models.Movie", b =>
                {
                    b.OwnsMany("MovieCatalog.Domain.Models.Person", "Actors", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid>("MovieId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Id")
                                .HasName("PK_Actors_Id");

                            b1.HasIndex("MovieId");

                            b1.ToTable("Actors", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("MovieId")
                                .HasConstraintName("FK_Actors_MovieId_Movies_Id");
                        });

                    b.OwnsOne("MovieCatalog.Domain.Models.Person", "Director", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid>("MovieId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Id")
                                .HasName("PK_Directors_Id");

                            b1.HasIndex("MovieId")
                                .IsUnique();

                            b1.ToTable("Directors", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("MovieId")
                                .HasConstraintName("FK_Directors_MovieId_Movies_Id");
                        });

                    b.Navigation("Actors");

                    b.Navigation("Director")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
